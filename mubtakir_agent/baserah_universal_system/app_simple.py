#!/usr/bin/env python3
"""
Baserah Revolutionary Shape Generator - SIMPLE & WORKING VERSION
🧬 Creator: Basil Yahya Abdullah
🌟 Pure Mathematics: No AI Libraries - Only Trigonometry + Sigmoid Enhancement
"""

import gradio as gr
import numpy as np
import matplotlib
matplotlib.use('Agg')  # Non-interactive backend
import matplotlib.pyplot as plt
import tempfile
import os

def baserah_sigmoid(x, alpha=1.0, k=1.0, x0=0.0):
    """Revolutionary sigmoid function - Basil's mathematical innovation"""
    return alpha / (1 + np.exp(-k * (x - x0)))

def generate_correct_shape(shape_type, scale_factor=1.0):
    """Generate mathematically CORRECT shapes"""
    
    t = np.linspace(0, 2*np.pi, 1000)
    
    if shape_type == 'circle':
        # Perfect circle - basic trigonometry
        x = scale_factor * np.cos(t)
        y = scale_factor * np.sin(t)
        
    elif shape_type == 'heart':
        # Classic heart equation
        x = scale_factor * 16 * np.sin(t)**3 / 16
        y = scale_factor * (13*np.cos(t) - 5*np.cos(2*t) - 2*np.cos(3*t) - np.cos(4*t)) / 16
        
    elif shape_type == 'star':
        # 5-pointed star
        n = 5  # number of points
        angles = np.linspace(0, 2*np.pi, n*2, endpoint=False)
        radii = np.tile([scale_factor, scale_factor*0.4], n)  # outer and inner radius
        
        # Create star coordinates
        star_x = radii * np.cos(angles)
        star_y = radii * np.sin(angles)
        
        # Interpolate to get smooth curve
        x = np.interp(t, angles, star_x)
        y = np.interp(t, angles, star_y)
        
    elif shape_type == 'flower':
        # Rose curve (6 petals)
        k = 3  # number of petals = 2*k
        r = scale_factor * np.cos(k * t)
        x = r * np.cos(t)
        y = r * np.sin(t)
        
    elif shape_type == 'butterfly':
        # Butterfly curve
        x = scale_factor * np.sin(t) * (np.exp(np.cos(t)) - 2*np.cos(4*t) - np.sin(t/12)**5) / 5
        y = scale_factor * np.cos(t) * (np.exp(np.cos(t)) - 2*np.cos(4*t) - np.sin(t/12)**5) / 5
        
    elif shape_type == 'spiral':
        # Archimedean spiral
        r = scale_factor * t / (2*np.pi)
        x = r * np.cos(t)
        y = r * np.sin(t)
        
    else:
        # Default circle
        x = scale_factor * np.cos(t)
        y = scale_factor * np.sin(t)
    
    return x, y

def create_shape_image(shape_type, size_scale, enhancement_level):
    """Create shape image with revolutionary enhancements"""
    
    try:
        # Generate base shape
        x, y = generate_correct_shape(shape_type, size_scale)
        
        # Apply Basil's revolutionary sigmoid enhancement
        if enhancement_level > 0:
            t = np.linspace(0, 2*np.pi, len(x))
            enhancement = baserah_sigmoid(t, alpha=enhancement_level*0.1, k=2.0)
            
            # Add subtle revolutionary improvements
            if shape_type == 'circle':
                x += enhancement * 0.05 * np.cos(3*t)
                y += enhancement * 0.05 * np.sin(3*t)
            elif shape_type == 'heart':
                x += enhancement * 0.1 * np.sin(2*t)
            elif shape_type == 'star':
                x += enhancement * 0.1 * np.cos(5*t)
                y += enhancement * 0.1 * np.sin(5*t)
        
        # Create beautiful plot
        fig, ax = plt.subplots(figsize=(8, 8))
        
        # Plot shape with gradient colors
        ax.plot(x, y, linewidth=4, color='#FF6B6B', alpha=0.9, label=f'{shape_type.title()} Shape')
        ax.fill(x, y, alpha=0.3, color='#4ECDC4')
        
        # Styling
        ax.set_title(f'🌟 Revolutionary {shape_type.title()} Shape\n🧮 Generated by Pure Mathematics (No AI)', 
                     fontsize=16, fontweight='bold', color='#2C3E50')
        ax.set_xlabel('X Coordinate', fontsize=12, color='#34495E')
        ax.set_ylabel('Y Coordinate', fontsize=12, color='#34495E')
        
        ax.grid(True, alpha=0.3, linestyle='--')
        ax.set_aspect('equal')
        ax.legend(fontsize=10)
        
        # Add revolutionary signature
        signature = f"""🧬 Creator: Basil Yahya Abdullah
🌟 Method: Pure Mathematics (Trigonometry + Sigmoid)
⚡ Enhancement Level: {enhancement_level:.1f}
📐 Scale: {size_scale:.1f}x
🚀 Revolutionary Theories Applied"""
        
        ax.text(0.02, 0.98, signature, transform=ax.transAxes, fontsize=8,
                verticalalignment='top', bbox=dict(boxstyle="round,pad=0.3", 
                facecolor="lightblue", alpha=0.8))
        
        plt.tight_layout()
        
        # Save to temporary file
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.png')
        plt.savefig(temp_file.name, format='png', dpi=150, bbox_inches='tight', 
                   facecolor='white', edgecolor='none')
        plt.close(fig)
        
        return temp_file.name
        
    except Exception as e:
        # Error handling
        fig, ax = plt.subplots(figsize=(8, 6))
        ax.text(0.5, 0.5, f'❌ Error generating {shape_type}:\n{str(e)}\n\n🔧 Please try different parameters', 
                ha='center', va='center', fontsize=14, color='red',
                bbox=dict(boxstyle="round,pad=0.5", facecolor="lightyellow"))
        ax.set_xlim(0, 1)
        ax.set_ylim(0, 1)
        ax.axis('off')
        
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.png')
        plt.savefig(temp_file.name, format='png', dpi=150, bbox_inches='tight')
        plt.close(fig)
        
        return temp_file.name

# Create Gradio interface
def create_interface():
    """Create simple and effective Gradio interface"""
    
    with gr.Blocks(title="🌟 Baserah Revolutionary Shape Generator", theme=gr.themes.Soft()) as interface:
        
        gr.Markdown("""
        # 🌟 Baserah Revolutionary Shape Generator
        ## 🧮 World's First Pure Mathematical Shape Generator
        ### 🚀 No AI Libraries - Only Pure Mathematics + Revolutionary Theories
        
        **🧬 Creator:** Basil Yahya Abdullah  
        **⚡ Method:** Trigonometry + Sigmoid Enhancement  
        **🎯 Innovation:** 100% Transparent Mathematical Approach  
        """)
        
        with gr.Row():
            with gr.Column(scale=1):
                gr.Markdown("### 🎯 Shape Controls")
                
                shape_type = gr.Dropdown(
                    choices=["circle", "heart", "star", "flower", "butterfly", "spiral"],
                    value="circle",
                    label="🎨 Select Shape Type"
                )
                
                size_scale = gr.Slider(
                    minimum=0.5, maximum=2.0, value=1.0, step=0.1,
                    label="📏 Size Scale"
                )
                
                enhancement = gr.Slider(
                    minimum=0.0, maximum=5.0, value=1.0, step=0.5,
                    label="⚡ Revolutionary Enhancement"
                )
                
                generate_btn = gr.Button("🚀 Generate Revolutionary Shape", variant="primary", size="lg")
                
            with gr.Column(scale=2):
                output_image = gr.Image(label="🎨 Generated Shape", type="filepath")
        
        # Auto-generate on parameter change
        for component in [shape_type, size_scale, enhancement]:
            component.change(
                fn=create_shape_image,
                inputs=[shape_type, size_scale, enhancement],
                outputs=output_image
            )
        
        generate_btn.click(
            fn=create_shape_image,
            inputs=[shape_type, size_scale, enhancement],
            outputs=output_image
        )
        
        gr.Markdown("""
        ---
        ### 🧬 Revolutionary Features:
        - **✅ Pure Mathematics:** Only trigonometry + sigmoid functions
        - **✅ No AI Libraries:** 100% transparent approach  
        - **✅ Real Shapes:** Mathematically correct geometry
        - **✅ Revolutionary Enhancement:** Basil's sigmoid innovations
        - **✅ Interactive:** Real-time parameter adjustment
        
        **🌟 This is the world's first shape generator using pure mathematical innovation without any traditional AI!**
        """)
    
    return interface

# Launch application
if __name__ == "__main__":
    interface = create_interface()
    interface.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=True,
        show_error=True
    )
