#!/usr/bin/env python3
"""
اختبار بسيط لمولد الأشكال الثوري
"""

import numpy as np
import matplotlib
matplotlib.use('Agg')  # Use non-interactive backend
import matplotlib.pyplot as plt
import tempfile
import os

def baserah_sigmoid(x, alpha=1.0, k=1.0, x0=0.0):
    """دالة السيجمويد الثورية الأساسية."""
    return alpha / (1 + np.exp(-k * (x - x0)))

def baserah_linear(x, beta=1.0, gamma=0.0):
    """دالة الخط المستقيم الثورية الأساسية."""
    return beta * x + gamma

def general_shape_equation(x, alpha_values, k_values, x0_values, beta_values, gamma_values):
    """
    General Shape Equation (GSE) - The Revolutionary Universal Equation
    f̂(x) = Σ(αᵢ · σₙᵢ(x; kᵢ, x₀ᵢ) + βᵢx + γᵢ)
    """
    result = np.zeros_like(x)
    
    for i in range(len(alpha_values)):
        # Sigmoid component
        sigmoid_part = alpha_values[i] * baserah_sigmoid(x, alpha=1.0, k=k_values[i], x0=x0_values[i])
        # Linear component
        linear_part = baserah_linear(x, beta=beta_values[i], gamma=gamma_values[i])
        # Combine
        result += sigmoid_part + linear_part
    
    return result

def generate_simple_shape():
    """Generate a simple circle shape"""
    
    # Circle parameters
    alpha = [1.0, 1.0]
    k = [2.0, 2.0] 
    x0 = [0.0, np.pi/2]
    beta = [0.0, 0.0]
    gamma = [0.0, 0.0]
    
    # Generate parametric coordinates
    t = np.linspace(0, 2*np.pi, 1000)
    
    # Apply GSE for x and y coordinates
    x_coords = general_shape_equation(t, alpha, k, x0, beta, gamma)
    y_coords = general_shape_equation(t + np.pi/4, alpha, k, x0, beta, gamma)
    
    return x_coords, y_coords

def test_shape_generation():
    """Test shape generation and save to file"""
    
    try:
        # Generate shape
        x_coords, y_coords = generate_simple_shape()
        print(f"✅ Shape generated: {len(x_coords)} points")
        
        # Create plot
        fig, ax = plt.subplots(figsize=(8, 8))
        ax.plot(x_coords, y_coords, linewidth=3, color='#FF6B6B', alpha=0.8)
        ax.fill(x_coords, y_coords, alpha=0.3, color='#4ECDC4')
        
        ax.set_title('Revolutionary Shape Test\nGenerated by GSE', 
                     fontsize=14, fontweight='bold')
        ax.set_xlabel('X Coordinate')
        ax.set_ylabel('Y Coordinate')
        ax.grid(True, alpha=0.3)
        ax.set_aspect('equal')
        
        plt.tight_layout()
        
        # Save to temporary file
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.png')
        plt.savefig(temp_file.name, format='png', dpi=150, bbox_inches='tight')
        plt.close(fig)
        
        print(f"✅ Image saved: {temp_file.name}")
        print(f"✅ File size: {os.path.getsize(temp_file.name)} bytes")
        
        return temp_file.name
        
    except Exception as e:
        print(f"❌ Error: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    print("🧪 Testing Baserah Shape Generator...")
    result = test_shape_generation()
    if result:
        print("🎉 Test successful!")
    else:
        print("💥 Test failed!")
