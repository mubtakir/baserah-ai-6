#!/usr/bin/env python3
# test_shapes_database.py - ุงุฎุชุจุงุฑ ูุงุนุฏุฉ ุจูุงูุงุช ุงูุฃุดูุงู ุงูุฃุณุงุณูุฉ

import sys
import os
from datetime import datetime

# ุฅุถุงูุฉ ุงููุณุงุฑ ููุงุณุชูุฑุงุฏ
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from knowledge_systems.shapes_database.shapes_database import BaserahShapesDatabase, ShapeType, ComplexityLevel
from revolutionary_intelligence.revolutionary_mother_system.revolutionary_mother_system import BaserahRevolutionaryMotherSystem

def test_shapes_database_initialization():
    """ุงุฎุชุจุงุฑ ุชููุฆุฉ ูุงุนุฏุฉ ุจูุงูุงุช ุงูุฃุดูุงู."""
    
    print("๐๏ธ ุงุฎุชุจุงุฑ ุชููุฆุฉ ูุงุนุฏุฉ ุจูุงูุงุช ุงูุฃุดูุงู...")
    print("-" * 50)
    
    # ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช
    shapes_db = BaserahShapesDatabase()
    
    # ูุญุต ุงูุชููุฆุฉ ุงูุฃุณุงุณูุฉ
    print(f"โ ูุนุฑู ูุงุนุฏุฉ ุงูุจูุงูุงุช: {shapes_db.database_id}")
    print(f"โ ุฅุฌูุงูู ุงูุฃุดูุงู: {len(shapes_db.shapes)}")
    
    # ูุญุต ุงูุฃููุงุน
    for shape_type in ShapeType:
        count = len(shapes_db.shape_categories[shape_type])
        print(f"   ๐ {shape_type.value}: {count} ุดูู")
    
    # ูุญุต ูุณุชููุงุช ุงูุชุนููุฏ
    for complexity in ComplexityLevel:
        count = len(shapes_db.complexity_index[complexity])
        print(f"   ๐ฏ {complexity.value}: {count} ุดูู")
    
    print("\nโ ุชููุฆุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช ููุชููุฉ!")
    return shapes_db

def test_shape_retrieval():
    """ุงุฎุชุจุงุฑ ุงุณุชุฑุฌุงุน ุงูุฃุดูุงู."""
    
    print("\n๐ ุงุฎุชุจุงุฑ ุงุณุชุฑุฌุงุน ุงูุฃุดูุงู...")
    print("-" * 50)
    
    shapes_db = BaserahShapesDatabase()
    
    # ุงุฎุชุจุงุฑ ุงูุญุตูู ุนูู ุดูู ูุญุฏุฏ
    square = shapes_db.get_shape("square_basic")
    if square:
        print(f"โ ุชู ุงูุนุซูุฑ ุนูู ุงููุฑุจุน: {square.metadata.name_ar}")
        print(f"   ุงูููุน: {square.shape_type.value}")
        print(f"   ุงูุชุนููุฏ: {square.complexity_level.value}")
        print(f"   ุงููุนุงุฏูุงุช: {len(square.equations)}")
        print(f"   ุงูุฌูุงู ุงูุฑูุงุถู: {square.metadata.mathematical_beauty}")
    else:
        print("โ ูู ูุชู ุงูุนุซูุฑ ุนูู ุงููุฑุจุน")
    
    # ุงุฎุชุจุงุฑ ุงูุญุตูู ุนูู ุงูุฃุดูุงู ุงูููุฏุณูุฉ
    geometric_shapes = shapes_db.get_shapes_by_type(ShapeType.GEOMETRIC)
    print(f"\nโ ุงูุฃุดูุงู ุงูููุฏุณูุฉ ({len(geometric_shapes)}):")
    for shape in geometric_shapes:
        print(f"   ๐ท {shape.metadata.name_ar} ({shape.metadata.name_en})")
    
    # ุงุฎุชุจุงุฑ ุงูุญุตูู ุนูู ุงูุฃุดูุงู ุงูุนุถููุฉ
    organic_shapes = shapes_db.get_shapes_by_type(ShapeType.ORGANIC)
    print(f"\nโ ุงูุฃุดูุงู ุงูุนุถููุฉ ({len(organic_shapes)}):")
    for shape in organic_shapes:
        print(f"   ๐ฟ {shape.metadata.name_ar} ({shape.metadata.name_en})")
    
    # ุงุฎุชุจุงุฑ ุงูุญุตูู ุนูู ุงูุฃุดูุงู ุงููุญุชุฑูุฉ
    professional_shapes = shapes_db.get_shapes_by_complexity(ComplexityLevel.PROFESSIONAL)
    print(f"\nโ ุงูุฃุดูุงู ุงููุญุชุฑูุฉ ({len(professional_shapes)}):")
    for shape in professional_shapes:
        print(f"   ๐ {shape.metadata.name_ar} - ุฌูุงู: {shape.metadata.mathematical_beauty}")

def test_shape_search():
    """ุงุฎุชุจุงุฑ ุงูุจุญุซ ูู ุงูุฃุดูุงู."""
    
    print("\n๐ ุงุฎุชุจุงุฑ ุงูุจุญุซ ูู ุงูุฃุดูุงู...")
    print("-" * 50)
    
    shapes_db = BaserahShapesDatabase()
    
    # ุงูุจุญุซ ุนู "ูุทุฉ"
    cat_results = shapes_db.search_shapes("ูุทุฉ")
    print(f"โ ูุชุงุฆุฌ ุงูุจุญุซ ุนู 'ูุทุฉ': {len(cat_results)}")
    for shape in cat_results:
        print(f"   ๐ฑ {shape.metadata.name_ar} - {shape.complexity_level.value}")
    
    # ุงูุจุญุซ ุนู "ููุฏุณู"
    geometric_results = shapes_db.search_shapes("ููุฏุณู")
    print(f"\nโ ูุชุงุฆุฌ ุงูุจุญุซ ุนู 'ููุฏุณู': {len(geometric_results)}")
    for shape in geometric_results:
        print(f"   ๐ {shape.metadata.name_ar}")
    
    # ุงูุจุญุซ ุนู "ุฑูุงุถู"
    math_results = shapes_db.search_shapes("ุฑูุงุถู")
    print(f"\nโ ูุชุงุฆุฌ ุงูุจุญุซ ุนู 'ุฑูุงุถู': {len(math_results)}")
    for shape in math_results:
        print(f"   ๐ {shape.metadata.name_ar}")

def test_transformation_sequence():
    """ุงุฎุชุจุงุฑ ุชุณูุณู ุงูุชุญููู."""
    
    print("\n๐ ุงุฎุชุจุงุฑ ุชุณูุณู ุงูุชุญููู...")
    print("-" * 50)
    
    shapes_db = BaserahShapesDatabase()
    
    # ุชุญููู ูู ูุฑุจุน ุฅูู ุฏุงุฆุฑุฉ
    transformation = shapes_db.get_transformation_sequence("square_basic", "circle_basic", steps=5)
    
    if transformation:
        print(f"โ ุชู ุฅูุดุงุก ุชุณูุณู ุงูุชุญููู: {len(transformation)} ุฎุทูุฉ")
        
        for step in transformation:
            print(f"   ุฎุทูุฉ {step['step'] + 1}: ุชูุฏู {step['progress']:.2f}")
            print(f"     ุงููุตู: {step['description']}")
            print(f"     ูุนุงุฏูุงุช: {len(step['equations'])}")
        
        print(f"\n๐ฏ ุงูุชุญููู ูู ูุฑุจุน ุฅูู ุฏุงุฆุฑุฉ ููุชูู!")
    else:
        print("โ ูุดู ูู ุฅูุดุงุก ุชุณูุณู ุงูุชุญููู")

def test_animation_examples():
    """ุงุฎุชุจุงุฑ ุฃูุซูุฉ ุงูุฑุณูู ุงููุชุญุฑูุฉ."""
    
    print("\n๐ฌ ุงุฎุชุจุงุฑ ุฃูุซูุฉ ุงูุฑุณูู ุงููุชุญุฑูุฉ...")
    print("-" * 50)
    
    shapes_db = BaserahShapesDatabase()
    
    # ุงูุจุญุซ ุนู ุงูุฃุดูุงู ุงููุชุญุฑูุฉ
    animated_shapes = [
        shape for shape in shapes_db.shapes.values() 
        if shape.animation_frames is not None
    ]
    
    print(f"โ ุงูุฃุดูุงู ุงููุชุญุฑูุฉ: {len(animated_shapes)}")
    
    for shape in animated_shapes:
        print(f"\n   ๐ฌ {shape.metadata.name_ar}:")
        print(f"     ุฅุทุงุฑุงุช: {len(shape.animation_frames) if shape.animation_frames else 0}")
        print(f"     ุงูููุน: {shape.shape_type.value}")
        print(f"     ุงูุชุนููุฏ: {shape.complexity_level.value}")
        
        if shape.animation_frames and len(shape.animation_frames) > 0:
            first_frame = shape.animation_frames[0]
            last_frame = shape.animation_frames[-1]
            print(f"     ุงูุฅุทุงุฑ ุงูุฃูู: {first_frame}")
            print(f"     ุงูุฅุทุงุฑ ุงูุฃุฎูุฑ: {last_frame}")

def test_mother_system_integration():
    """ุงุฎุชุจุงุฑ ุงูุชูุงูู ูุน ุงููุธุงู ุงูุฃู."""
    
    print("\n๐ ุงุฎุชุจุงุฑ ุงูุชูุงูู ูุน ุงููุธุงู ุงูุฃู...")
    print("-" * 50)
    
    # ุฅูุดุงุก ุงููุธุงู ุงูุฃู
    mother_system = BaserahRevolutionaryMotherSystem()
    
    print(f"โ ุงููุธุงู ุงูุฃู: {mother_system.system_id}")
    print(f"โ ูุงุนุฏุฉ ุจูุงูุงุช ุงูุฃุดูุงู: {mother_system.shapes_database.database_id}")
    
    # ุงุฎุชุจุงุฑ ุงููุตูู ููุฃุดูุงู ุนุจุฑ ุงููุธุงู ุงูุฃู
    square = mother_system.get_shape("square_basic")
    if square:
        print(f"โ ุงููุตูู ูููุฑุจุน ุนุจุฑ ุงููุธุงู ุงูุฃู: {square.metadata.name_ar}")
    
    # ุงุฎุชุจุงุฑ ุงูุจุญุซ ุนุจุฑ ุงููุธุงู ุงูุฃู
    search_results = mother_system.search_shapes("ุฏุงุฆุฑุฉ")
    print(f"โ ูุชุงุฆุฌ ุงูุจุญุซ ุนุจุฑ ุงููุธุงู ุงูุฃู: {len(search_results)}")
    
    # ุงุฎุชุจุงุฑ ุงูุชุญููู ุนุจุฑ ุงููุธุงู ุงูุฃู
    transformation = mother_system.get_transformation_sequence("square_basic", "circle_basic", steps=3)
    print(f"โ ุชุญููู ุนุจุฑ ุงููุธุงู ุงูุฃู: {len(transformation)} ุฎุทูุฉ")
    
    # ุงุฎุชุจุงุฑ ููุฎุต ุงููุธุงู
    summary = mother_system.get_system_summary()
    shapes_info = summary.get('shapes_database', {})
    
    print(f"\n๐ ููุฎุต ูุงุนุฏุฉ ุจูุงูุงุช ุงูุฃุดูุงู:")
    print(f"   ุฅุฌูุงูู ุงูุฃุดูุงู: {shapes_info.get('total_shapes', 0)}")
    print(f"   ุงูุฃุดูุงู ุงููุชุญุฑูุฉ: {shapes_info.get('animated_shapes', 0)}")
    print(f"   ูุชูุณุท ุงูุฌูุงู ุงูุฑูุงุถู: {shapes_info.get('mathematical_beauty_average', 0):.3f}")
    
    print("\nโ ุงูุชูุงูู ูุน ุงููุธุงู ุงูุฃู ููุชูู!")

def test_database_export():
    """ุงุฎุชุจุงุฑ ุชุตุฏูุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช."""
    
    print("\n๐พ ุงุฎุชุจุงุฑ ุชุตุฏูุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช...")
    print("-" * 50)
    
    shapes_db = BaserahShapesDatabase()
    
    # ุชุตุฏูุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช
    export_filename = shapes_db.export_database()
    
    print(f"โ ุชู ุชุตุฏูุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช: {export_filename}")
    
    # ูุญุต ุงูููู ุงููุตุฏุฑ
    if os.path.exists(export_filename):
        file_size = os.path.getsize(export_filename)
        print(f"โ ุญุฌู ุงูููู: {file_size} ุจุงูุช")
        
        # ูุฑุงุกุฉ ุฌุฒุก ูู ุงูููู ููุชุญูู
        with open(export_filename, 'r', encoding='utf-8') as f:
            content_preview = f.read(200)
            print(f"โ ูุนุงููุฉ ุงููุญุชูู: {content_preview[:100]}...")
        
        # ุญุฐู ุงูููู ุจุนุฏ ุงูุงุฎุชุจุงุฑ
        os.remove(export_filename)
        print(f"โ ุชู ุญุฐู ููู ุงูุงุฎุชุจุงุฑ")
    else:
        print("โ ูุดู ูู ุฅูุดุงุก ููู ุงูุชุตุฏูุฑ")

def run_comprehensive_shapes_test():
    """ุชุดุบูู ุงุฎุชุจุงุฑ ุดุงูู ููุงุนุฏุฉ ุจูุงูุงุช ุงูุฃุดูุงู."""
    
    print("๐๏ธ ุงุฎุชุจุงุฑ ุดุงูู ููุงุนุฏุฉ ุจูุงูุงุช ุงูุฃุดูุงู ุงูุฃุณุงุณูุฉ")
    print("=" * 70)
    print(f"๐ ุชุงุฑูุฎ ุงูุงุฎุชุจุงุฑ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 70)
    
    try:
        # ุชุดุบูู ุฌููุน ุงูุงุฎุชุจุงุฑุงุช
        shapes_db = test_shapes_database_initialization()
        test_shape_retrieval()
        test_shape_search()
        test_transformation_sequence()
        test_animation_examples()
        test_mother_system_integration()
        test_database_export()
        
        # ููุฎุต ุงููุชุงุฆุฌ
        print("\n" + "=" * 70)
        print("๐ ููุฎุต ูุชุงุฆุฌ ุงุฎุชุจุงุฑ ูุงุนุฏุฉ ุจูุงูุงุช ุงูุฃุดูุงู:")
        
        summary = shapes_db.get_database_summary()
        
        print(f"   ุฅุฌูุงูู ุงูุฃุดูุงู: {summary['total_shapes']}")
        print(f"   ุงูุฃุดูุงู ุงูููุฏุณูุฉ: {summary['shapes_by_type'].get('geometric', 0)}")
        print(f"   ุงูุฃุดูุงู ุงูุนุถููุฉ: {summary['shapes_by_type'].get('organic', 0)}")
        print(f"   ุงูุฃุดูุงู ุงูุฑูุงุถูุฉ: {summary['shapes_by_type'].get('mathematical', 0)}")
        print(f"   ุงูุฃุดูุงู ุงููููุฉ: {summary['shapes_by_type'].get('artistic', 0)}")
        print(f"   ุฃูุซูุฉ ุงูุชุญููู: {summary['shapes_by_type'].get('abstract', 0)}")
        print(f"   ุงูุฃุดูุงู ุงููุชุญุฑูุฉ: {summary['animated_shapes']}")
        print(f"   ูุชูุณุท ุงูุฌูุงู ุงูุฑูุงุถู: {summary['mathematical_beauty_average']:.3f}")
        
        print(f"\n๐ ูุงุนุฏุฉ ุจูุงูุงุช ุงูุฃุดูุงู ุชุนูู ุจูุฌุงุญ ูุงูู!")
        print(f"โ ุฌููุน ุงูุฃุดูุงู ุงูุฃุณุงุณูุฉ ูุชุงุญุฉ ูููุฑุงุซุฉ!")
        print(f"๐ ุฃูุซูุฉ ุงูุชุญููู ูุงูุชููู ุฌุงูุฒุฉ!")
        print(f"๐ฌ ุงูุฑุณูู ุงููุชุญุฑูุฉ ูุฏุนููุฉ!")
        print(f"๐ ุงูุชูุงูู ูุน ุงููุธุงู ุงูุฃู ูุญูู!")
        
        print(f"\n๐ฏ ูุงุนุฏุฉ ุจูุงูุงุช ุงูุฃุดูุงู ุฌุงูุฒุฉ ููุฑุงุซุฉ ุฌููุน ุงููุญุฏุงุช!")
        
    except Exception as e:
        print(f"\nโ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ูุงุนุฏุฉ ุจูุงูุงุช ุงูุฃุดูุงู: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    run_comprehensive_shapes_test()
