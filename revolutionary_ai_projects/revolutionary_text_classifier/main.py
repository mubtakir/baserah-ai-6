#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
๐ ูุตูู ุงููุตูุต ุงูุซูุฑู
Revolutionary Text Classifier

ูุจูู ุนูู ูุธุงู ุจุตูุฑุฉ ุงูุซูุฑู - ุจุฏูู ูุนุงูุฌุฉ ูุบุฉ ุทุจูุนูุฉ ุชูููุฏูุฉ
Built on Basera Revolutionary System - No traditional NLP

ุงููุทูุฑ: ุจุงุณู ูุญูู ุนุจุฏุงููู
ุฌููุน ุงูุฃููุงุฑ ูุงููุธุฑูุงุช ูู ุฅุจุฏุงุนู ุงูุดุฎุตู
"""

import numpy as np
import json
import re
from datetime import datetime
from typing import Dict, List, Tuple, Any
from collections import defaultdict
import math

class RevolutionaryTextClassifier:
    """
    ๐ ูุตูู ุงููุตูุต ุงูุซูุฑู
    ูุณุชุฎุฏู ุงููุธุฑูุงุช ุงูุซูุงุซ ุงูุซูุฑูุฉ ูุชุตููู ุงููุตูุต ูุชุญููู ุงููุดุงุนุฑ
    """
    
    def __init__(self, classifier_name: str = "RevolutionaryTextClassifier"):
        """ุชููุฆุฉ ุงููุตูู"""
        self.classifier_name = classifier_name
        self.categories = {}
        self.sentiment_patterns = {}
        self.classification_history = []
        
        print(f"๐ ุชููุฆุฉ {self.classifier_name}")
        print("๐งฌ ูุตูู ูุตูุต ุซูุฑู ุจุฏูู ูุนุงูุฌุฉ ูุบุฉ ุชูููุฏูุฉ")
    
    def train_category(self, category_name: str, training_texts: List[str]):
        """
        ๐ ุชุฏุฑูุจ ูุฆุฉ ุฌุฏูุฏุฉ ุจุงุณุชุฎุฏุงู ุงููุธุฑูุงุช ุงูุซูุฑูุฉ
        """
        print(f"๐ ุชุฏุฑูุจ ูุฆุฉ: {category_name} ุจู {len(training_texts)} ูุต")
        
        # ุชุทุจูู ุงููุธุฑูุงุช ุงูุซูุงุซ ุนูู ุงููุตูุต ุงูุชุฏุฑูุจูุฉ
        category_profile = self._create_category_profile(training_texts)
        
        # ุญูุธ ููู ุงููุฆุฉ
        self.categories[category_name] = {
            "profile": category_profile,
            "training_count": len(training_texts),
            "trained_at": datetime.now().isoformat()
        }
        
        print(f"โ ุชู ุชุฏุฑูุจ ูุฆุฉ {category_name} ุจูุฌุงุญ")
    
    def classify_text(self, text: str) -> Dict:
        """
        ๐ฏ ุชุตููู ูุต ุจุงุณุชุฎุฏุงู ุงููุธุฑูุงุช ุงูุซูุฑูุฉ
        """
        print(f"\n๐ฏ ุชุตููู ุงููุต: '{text[:50]}...'")
        
        if not self.categories:
            return {
                "predicted_category": "unknown",
                "confidence": 0.0,
                "reason": "ูุง ุชูุฌุฏ ูุฆุงุช ูุฏุฑุจุฉ"
            }
        
        # ุชุญููู ุงููุต ุจุงุณุชุฎุฏุงู ุงููุธุฑูุงุช ุงูุซูุงุซ
        text_analysis = self._analyze_text(text)
        
        # ุญุณุงุจ ุงูุชุทุงุจู ูุน ูู ูุฆุฉ
        category_scores = {}
        for category_name, category_data in self.categories.items():
            score = self._calculate_category_match(
                text_analysis, category_data["profile"]
            )
            category_scores[category_name] = score
        
        # ุงุฎุชูุงุฑ ุฃูุถู ูุฆุฉ
        best_category = max(category_scores, key=category_scores.get)
        confidence = category_scores[best_category]
        
        # ุชูููุฏ ุงูุชูุณูุฑ
        explanation = self._generate_classification_explanation(
            text_analysis, best_category, confidence
        )
        
        # ุญูุธ ูุชูุฌุฉ ุงูุชุตููู
        classification_result = {
            "text": text,
            "predicted_category": best_category,
            "confidence": confidence,
            "all_scores": category_scores,
            "explanation": explanation,
            "classified_at": datetime.now().isoformat()
        }
        
        self.classification_history.append(classification_result)
        
        return classification_result
    
    def analyze_sentiment(self, text: str) -> Dict:
        """
        ๐ ุชุญููู ุงููุดุงุนุฑ ุจุงุณุชุฎุฏุงู ุซูุงุฆูุฉ ุงูุตูุฑ
        """
        print(f"\n๐ ุชุญููู ูุดุงุนุฑ ุงููุต: '{text[:50]}...'")
        
        # ุชุทุจูู ุซูุงุฆูุฉ ุงูุตูุฑ ุนูู ุงููุดุงุนุฑ
        sentiment_duality = self.apply_zero_duality_to_sentiment(text)
        
        # ุชุญุฏูุฏ ุงููุดุงุนุฑ ุงูุฅุฌูุงููุฉ
        overall_sentiment = self._determine_overall_sentiment(sentiment_duality)
        
        return {
            "text": text,
            "sentiment_analysis": sentiment_duality,
            "overall_sentiment": overall_sentiment,
            "analyzed_at": datetime.now().isoformat()
        }
    
    def apply_zero_duality_to_sentiment(self, text: str) -> Dict:
        """
        ๐ ุชุทุจูู ูุธุฑูุฉ ุซูุงุฆูุฉ ุงูุตูุฑ ุนูู ุงููุดุงุนุฑ
        ุชุญููู ุงูุชูุงุฒู ุจูู ุงููุดุงุนุฑ ุงูุฅูุฌุงุจูุฉ ูุงูุณูุจูุฉ
        """
        words = self._extract_words(text)
        
        positive_words = []
        negative_words = []
        neutral_words = []
        
        for word in words:
            sentiment_energy = self._calculate_sentiment_energy(word)
            
            if sentiment_energy > 0.6:
                positive_words.append(word)
            elif sentiment_energy < 0.4:
                negative_words.append(word)
            else:
                neutral_words.append(word)
        
        # ุญุณุงุจ ุงูุชูุงุฒู ุงูุนุงุทูู
        total_emotional_words = len(positive_words) + len(negative_words)
        if total_emotional_words > 0:
            positivity_ratio = len(positive_words) / total_emotional_words
        else:
            positivity_ratio = 0.5  # ูุญุงูุฏ
        
        return {
            "positive_words": positive_words,
            "negative_words": negative_words,
            "neutral_words": neutral_words,
            "positivity_ratio": positivity_ratio,
            "emotional_balance": self._interpret_emotional_balance(positivity_ratio)
        }
    
    def _create_category_profile(self, training_texts: List[str]) -> Dict:
        """ุฅูุดุงุก ููู ุดุฎุตู ูููุฆุฉ"""
        all_analyses = []
        
        for text in training_texts:
            analysis = self._analyze_text(text)
            all_analyses.append(analysis)
        
        # ุฏูุฌ ุงูุชุญูููุงุช ูุฅูุดุงุก ููู ุงููุฆุฉ
        category_profile = self._merge_text_analyses(all_analyses)
        
        return category_profile
    
    def _analyze_text(self, text: str) -> Dict:
        """ุชุญููู ูุต ุจุงุณุชุฎุฏุงู ุงููุธุฑูุงุช ุงูุซูุงุซ"""
        # ุซูุงุฆูุฉ ุงูุตูุฑ
        zero_duality = self.apply_zero_duality_to_text(text)
        
        # ุงูุฃุถุฏุงุฏ ุงููุชุนุงูุฏุฉ
        perpendicular = self.apply_perpendicular_opposites_to_text(text)
        
        # ุงูุฎููุท
        filaments = self.apply_filament_theory_to_text(text)
        
        return {
            "zero_duality": zero_duality,
            "perpendicular_opposites": perpendicular,
            "filament_connections": filaments,
            "word_count": len(self._extract_words(text)),
            "character_count": len(text)
        }
    
    def apply_zero_duality_to_text(self, text: str) -> Dict:
        """ุชุทุจูู ุซูุงุฆูุฉ ุงูุตูุฑ ุนูู ุงููุต"""
        words = self._extract_words(text)
        
        formal_words = []
        informal_words = []
        
        for word in words:
            formality_score = self._calculate_formality_score(word)
            
            if formality_score > 0.5:
                formal_words.append(word)
            else:
                informal_words.append(word)
        
        # ุญุณุงุจ ุงูุชูุงุฒู ุงูุฃุณููุจู
        total_words = len(formal_words) + len(informal_words)
        if total_words > 0:
            formality_ratio = len(formal_words) / total_words
        else:
            formality_ratio = 0.5
        
        return {
            "formal_words": formal_words,
            "informal_words": informal_words,
            "formality_ratio": formality_ratio,
            "style_insight": self._interpret_style(formality_ratio)
        }
    
    def apply_perpendicular_opposites_to_text(self, text: str) -> Dict:
        """ุชุทุจูู ุงูุฃุถุฏุงุฏ ุงููุชุนุงูุฏุฉ ุนูู ุงููุต"""
        words = self._extract_words(text)
        
        # ุงูุจุญุซ ุนู ุฃุฒูุงุฌ ุงููููุงุช ุงููุชุถุงุฏุฉ
        opposite_pairs = self._find_word_opposites(words)
        
        # ุฅูุดุงุก ุฃุจุนุงุฏ ุฏูุงููุฉ
        semantic_dimensions = []
        for pair in opposite_pairs:
            dimension = self._create_word_dimension(pair)
            semantic_dimensions.append(dimension)
        
        return {
            "opposite_pairs": opposite_pairs,
            "semantic_dimensions": semantic_dimensions,
            "conceptual_complexity": len(semantic_dimensions) * 0.1
        }
    
    def apply_filament_theory_to_text(self, text: str) -> Dict:
        """ุชุทุจูู ูุธุฑูุฉ ุงูุฎููุท ุนูู ุงููุต"""
        words = self._extract_words(text)
        
        # ุฑุจุท ุงููููุงุช ุจุฎููุท ุฏูุงููุฉ
        word_connections = {}
        for word in words:
            connected_words = self._find_word_connections(word, words)
            word_connections[word] = connected_words
        
        # ุงูุชุดุงู ุงูููุถูุนุงุช
        topics = self._discover_topics(word_connections)
        
        return {
            "word_connections": word_connections,
            "discovered_topics": topics,
            "coherence_score": self._calculate_text_coherence(word_connections)
        }
    
    def _extract_words(self, text: str) -> List[str]:
        """ุงุณุชุฎุฑุงุฌ ุงููููุงุช ูู ุงููุต"""
        # ุชูุธูู ุงููุต
        cleaned_text = re.sub(r'[^\w\s]', ' ', text.lower())
        words = [word for word in cleaned_text.split() if len(word) > 2]
        return words
    
    def _calculate_sentiment_energy(self, word: str) -> float:
        """ุญุณุงุจ ุงูุทุงูุฉ ุงูุนุงุทููุฉ ูููููุฉ"""
        # ูุงููุณ ุจุณูุท ูููุดุงุนุฑ
        positive_indicators = ['ุฌููู', 'ุฑุงุฆุน', 'ููุชุงุฒ', 'ุณุนูุฏ', 'ุญุจ', 'ูุฌุญ', 'ูุฑุญ']
        negative_indicators = ['ุณูุก', 'ูุธูุน', 'ุญุฒูู', 'ุบุถุจ', 'ูุดู', 'ุฃูู', 'ุฎูู']
        
        if any(indicator in word for indicator in positive_indicators):
            return 0.8
        elif any(indicator in word for indicator in negative_indicators):
            return 0.2
        else:
            # ุญุณุงุจ ุจูุงุกู ุนูู ุฎุตุงุฆุต ุงููููุฉ
            word_hash = hash(word) % 100
            return word_hash / 100
    
    def _interpret_emotional_balance(self, positivity_ratio: float) -> str:
        """ุชูุณูุฑ ุงูุชูุงุฒู ุงูุนุงุทูู"""
        if positivity_ratio > 0.7:
            return "ุฅูุฌุงุจู ุฌุฏุงู"
        elif positivity_ratio > 0.6:
            return "ุฅูุฌุงุจู"
        elif positivity_ratio > 0.4:
            return "ูุญุงูุฏ"
        elif positivity_ratio > 0.3:
            return "ุณูุจู"
        else:
            return "ุณูุจู ุฌุฏุงู"
    
    def _calculate_formality_score(self, word: str) -> float:
        """ุญุณุงุจ ุฏุฑุฌุฉ ุงูุฑุณููุฉ ูููููุฉ"""
        # ูุคุดุฑุงุช ุงูุฑุณููุฉ
        formal_indicators = ['ูุฑุฌู', 'ูุชุดุฑู', 'ูุญูุทูู', 'ุงููุญุชุฑู', 'ุงูุชูุฏูุฑ']
        informal_indicators = ['ูุงู', 'ูุฑุญุจุง', 'ุดูููู', 'ูููู', 'ููุง']
        
        if any(indicator in word for indicator in formal_indicators):
            return 0.9
        elif any(indicator in word for indicator in informal_indicators):
            return 0.1
        else:
            # ุญุณุงุจ ุจูุงุกู ุนูู ุทูู ุงููููุฉ (ุงููููุงุช ุงูุทูููุฉ ุฃูุซุฑ ุฑุณููุฉ)
            length_score = min(len(word) / 10, 1.0)
            return length_score
    
    def _interpret_style(self, formality_ratio: float) -> str:
        """ุชูุณูุฑ ุงูุฃุณููุจ"""
        if formality_ratio > 0.7:
            return "ุฑุณูู ุฌุฏุงู"
        elif formality_ratio > 0.6:
            return "ุฑุณูู"
        elif formality_ratio > 0.4:
            return "ูุชูุณุท"
        elif formality_ratio > 0.3:
            return "ุบูุฑ ุฑุณูู"
        else:
            return "ุนุงูู"
    
    def _find_word_opposites(self, words: List[str]) -> List[Tuple]:
        """ุงูุจุญุซ ุนู ุงููููุงุช ุงููุชุถุงุฏุฉ"""
        opposites = []
        
        # ูุงููุณ ุจุณูุท ููุฃุถุฏุงุฏ
        opposite_pairs = [
            ('ุฌููู', 'ูุจูุญ'), ('ูุจูุฑ', 'ุตุบูุฑ'), ('ุณุฑูุน', 'ุจุทูุก'),
            ('ุณุงุฎู', 'ุจุงุฑุฏ'), ('ููุฑ', 'ุธูุงู'), ('ูุฑุญ', 'ุญุฒู')
        ]
        
        for word1 in words:
            for word2 in words:
                if word1 != word2:
                    for pair in opposite_pairs:
                        if (word1 in pair[0] and word2 in pair[1]) or \
                           (word1 in pair[1] and word2 in pair[0]):
                            opposites.append((word1, word2))
        
        return opposites
    
    def _create_word_dimension(self, word_pair: Tuple) -> Dict:
        """ุฅูุดุงุก ุจูุนุฏ ูู ุฒูุฌ ูููุงุช"""
        word1, word2 = word_pair
        
        dimension = {
            "axis_name": f"{word1}_vs_{word2}",
            "semantic_distance": self._calculate_semantic_distance(word1, word2),
            "conceptual_bridge": self._find_conceptual_bridge(word1, word2)
        }
        
        return dimension
    
    def _calculate_semantic_distance(self, word1: str, word2: str) -> float:
        """ุญุณุงุจ ุงููุณุงูุฉ ุงูุฏูุงููุฉ"""
        # ุญุณุงุจ ุจุณูุท ุจูุงุกู ุนูู ุงูุงุฎุชูุงู ูู ุงูุฎุตุงุฆุต
        len_diff = abs(len(word1) - len(word2)) / max(len(word1), len(word2))
        hash_diff = abs(hash(word1) - hash(word2)) % 100 / 100
        
        return (len_diff + hash_diff) / 2
    
    def _find_conceptual_bridge(self, word1: str, word2: str) -> str:
        """ุฅูุฌุงุฏ ุงูุฌุณุฑ ุงูููุงูููู"""
        # ููููู ุจุณูุท ููุฌุณุฑ
        combined_hash = (hash(word1) + hash(word2)) % 3
        
        bridges = ["ุชุฏุฑุฌ", "ุชูุงูู", "ุชูุงุฒู"]
        return bridges[combined_hash]
    
    def _find_word_connections(self, word: str, all_words: List[str]) -> List[str]:
        """ุงูุจุญุซ ุนู ุงุชุตุงูุงุช ุงููููุฉ"""
        connections = []
        
        for other_word in all_words:
            if other_word != word:
                connection_strength = self._calculate_word_connection(word, other_word)
                
                if connection_strength > 0.6:
                    connections.append(other_word)
        
        return connections
    
    def _calculate_word_connection(self, word1: str, word2: str) -> float:
        """ุญุณุงุจ ููุฉ ุงูุงุชุตุงู ุจูู ูููุชูู"""
        # ุงูุชุดุงุจู ูู ุงูุทูู
        length_similarity = 1.0 - abs(len(word1) - len(word2)) / max(len(word1), len(word2))
        
        # ุงูุชุดุงุจู ูู ุงูุฃุญุฑู ุงูุฃููู
        first_char_similarity = 1.0 if word1[0] == word2[0] else 0.0
        
        # ููุฉ ุงูุงุชุตุงู ุงูุฅุฌูุงููุฉ
        connection_strength = (length_similarity + first_char_similarity) / 2
        
        return connection_strength
    
    def _discover_topics(self, word_connections: Dict) -> List[str]:
        """ุงูุชุดุงู ุงูููุถูุนุงุช"""
        topics = []
        
        # ุงูุจุญุซ ุนู ูุฌููุนุงุช ุงููููุงุช ุงููุชุฑุงุจุทุฉ
        for word, connections in word_connections.items():
            if len(connections) >= 2:
                topic = f"ููุถูุน: {word} ({len(connections)} ูููุงุช ูุฑุชุจุทุฉ)"
                topics.append(topic)
        
        return topics
    
    def _calculate_text_coherence(self, word_connections: Dict) -> float:
        """ุญุณุงุจ ุชูุงุณู ุงููุต"""
        total_connections = sum(len(connections) for connections in word_connections.values())
        total_words = len(word_connections)
        
        if total_words == 0:
            return 0.0
        
        coherence = total_connections / total_words
        return min(coherence, 1.0)
    
    def _merge_text_analyses(self, analyses: List[Dict]) -> Dict:
        """ุฏูุฌ ุชุญูููุงุช ุงููุตูุต ูุฅูุดุงุก ููู ุงููุฆุฉ"""
        if not analyses:
            return {}
        
        # ุญุณุงุจ ุงููุชูุณุทุงุช
        avg_formality = np.mean([a["zero_duality"]["formality_ratio"] for a in analyses])
        avg_complexity = np.mean([a["perpendicular_opposites"]["conceptual_complexity"] for a in analyses])
        avg_coherence = np.mean([a["filament_connections"]["coherence_score"] for a in analyses])
        avg_word_count = np.mean([a["word_count"] for a in analyses])
        
        return {
            "average_formality": avg_formality,
            "average_complexity": avg_complexity,
            "average_coherence": avg_coherence,
            "average_word_count": avg_word_count,
            "profile_created_at": datetime.now().isoformat()
        }
    
    def _calculate_category_match(self, text_analysis: Dict, category_profile: Dict) -> float:
        """ุญุณุงุจ ุงูุชุทุงุจู ูุน ูุฆุฉ"""
        # ููุงุฑูุฉ ุงูุฎุตุงุฆุต
        formality_match = 1.0 - abs(
            text_analysis["zero_duality"]["formality_ratio"] - 
            category_profile["average_formality"]
        )
        
        complexity_match = 1.0 - abs(
            text_analysis["perpendicular_opposites"]["conceptual_complexity"] - 
            category_profile["average_complexity"]
        )
        
        coherence_match = 1.0 - abs(
            text_analysis["filament_connections"]["coherence_score"] - 
            category_profile["average_coherence"]
        )
        
        # ุงููุชูุฌุฉ ุงูุฅุฌูุงููุฉ
        overall_match = (formality_match + complexity_match + coherence_match) / 3
        
        return overall_match
    
    def _generate_classification_explanation(self, text_analysis: Dict, category: str, confidence: float) -> str:
        """ุชูููุฏ ุชูุณูุฑ ููุชุตููู"""
        style = text_analysis["zero_duality"]["style_insight"]
        complexity = text_analysis["perpendicular_opposites"]["conceptual_complexity"]
        
        explanation = f"ุชู ุชุตููู ุงููุต ูู '{category}' ุจูุงุกู ุนูู ุงูุฃุณููุจ ({style})"
        
        if complexity > 0.5:
            explanation += " ูุงูุชุนููุฏ ุงูููุงูููู ุงูุนุงูู"
        
        return explanation
    
    def _determine_overall_sentiment(self, sentiment_duality: Dict) -> str:
        """ุชุญุฏูุฏ ุงููุดุงุนุฑ ุงูุฅุฌูุงููุฉ"""
        return sentiment_duality["emotional_balance"]

def main():
    """ูุซุงู ุนูู ุงูุงุณุชุฎุฏุงู"""
    print("๐ ูุตูู ุงููุตูุต ุงูุซูุฑู - ูุซุงู ุชุทุจููู")
    print("=" * 50)
    
    # ุฅูุดุงุก ุงููุตูู
    classifier = RevolutionaryTextClassifier("NewsClassifier")
    
    # ูุตูุต ุชุฏุฑูุจูุฉ ูููุฆุงุช
    sports_texts = [
        "ุงููุฑูู ูุงุฒ ูู ุงููุจุงุฑุงุฉ ุจูุชูุฌุฉ ุฑุงุฆุนุฉ",
        "ุงููุงุนุจ ุณุฌู ูุฏู ุฌููู ูู ุงูุฏูููุฉ ุงูุฃุฎูุฑุฉ",
        "ุงูุจุทููุฉ ูุงูุช ูุซูุฑุฉ ููููุฆุฉ ุจุงูููุงุฌุขุช"
    ]
    
    technology_texts = [
        "ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูุทูุฑ ุชูููุงุช ุฌุฏูุฏุฉ",
        "ุงูุดุฑูุฉ ุฃุทููุช ููุชุฌ ุชููู ูุชูุฏู",
        "ุงูุจุฑูุฌุฉ ุชุชุทูุฑ ุจุณุฑุนุฉ ูุจูุฑุฉ"
    ]
    
    # ุชุฏุฑูุจ ุงููุฆุงุช
    classifier.train_category("ุฑูุงุถุฉ", sports_texts)
    classifier.train_category("ุชูููููุฌูุง", technology_texts)
    
    # ูุตูุต ููุงุฎุชุจุงุฑ
    test_texts = [
        "ุงููุฑูู ุงูุฌุฏูุฏ ูุณุชุฎุฏู ุชูููุงุช ูุชุทูุฑุฉ ูู ุงูุชุฏุฑูุจ",
        "ุงููุจุงุฑุงุฉ ูุงูุช ูุซูุฑุฉ ุฌุฏุงู ูุงูุฌูููุฑ ุงุณุชูุชุน",
        "ุงูุดุฑูุฉ ุทูุฑุช ุชุทุจูู ุฌุฏูุฏ ููููุงุชู ุงูุฐููุฉ",
        "ูุฐุง ุงูููุชุฌ ุณูุก ุฌุฏุงู ููุง ุฃูุตุญ ุจุดุฑุงุฆู"
    ]
    
    # ุงุฎุชุจุงุฑ ุงูุชุตููู
    for i, text in enumerate(test_texts, 1):
        # ุชุตููู ุงููุต
        classification = classifier.classify_text(text)
        
        # ุชุญููู ุงููุดุงุนุฑ
        sentiment = classifier.analyze_sentiment(text)
        
        print(f"\n๐ ุงููุต {i}: '{text}'")
        print(f"   ๐ฏ ุงููุฆุฉ: {classification['predicted_category']}")
        print(f"   ๐ ุงูุซูุฉ: {classification['confidence']:.3f}")
        print(f"   ๐ก ุงูุณุจุจ: {classification['explanation']}")
        print(f"   ๐ ุงููุดุงุนุฑ: {sentiment['overall_sentiment']}")
        print(f"   ๐ ุงูุฅูุฌุงุจูุฉ: {sentiment['sentiment_analysis']['positivity_ratio']:.3f}")
    
    print("\nโ ุชู ุฅูุฌุงุฒ ุงูุชุตููู ูุชุญููู ุงููุดุงุนุฑ ุจูุฌุงุญ!")

if __name__ == "__main__":
    main()
